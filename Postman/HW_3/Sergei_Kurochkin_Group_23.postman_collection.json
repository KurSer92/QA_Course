{
	"info": {
		"_postman_id": "5f0e4ac4-2f52-4b0f-b3ae-9a11f04a0be4",
		"name": "Group_23",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_3",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = pm.response.json();\r",
									"pm.environment.set(\"token\", resp.token)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"SergeiK\";\r\n    \"password\": \"code\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login",
							"host": [
								"{{url}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var res = pm.response.json();\r",
									"\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({ logger: console, allErrors: true }),\r",
									"schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"person\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\"type\": \"integer\"},\r",
									"        \"u_name\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\"type\": \"string\"},\r",
									"            {\"type\": \"integer\"},\r",
									"            {\"type\": \"integer\"}\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"u_age\",\r",
									"        \"u_name\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\"type\": \"number\"},\r",
									"    \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
									"    \"start_qa_salary\": {\"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"person\",\r",
									"    \"qa_salary_after_12_months\",\r",
									"    \"qa_salary_after_6_months\",\r",
									"    \"start_qa_salary\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(ajv.validate(schema, res, JSON.stringify(ajv.errors))).to.be.true;\r",
									"})\r",
									"\r",
									"var req = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"6 months salary result is ok\", function() {\r",
									"    pm.expect(req.salary*2).to.eql(res.qa_salary_after_6_months)\r",
									"})\r",
									"\r",
									"pm.test(\"12 months salary result is ok\", function() {\r",
									"    pm.expect(req.salary*2.9).to.eql(res.qa_salary_after_12_months)\r",
									"})\r",
									"\r",
									"pm.test(\"1.5 year salary result is ok\", function() {\r",
									"    pm.expect(req.salary*4).to.eql(res.person.u_salary_1_5_year)\r",
									"})\r",
									"\r",
									"pm.environment.set(\"u_salary_1_5_year\", res.person.u_salary_1_5_year)\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get('url') + 'get_test_user',\r",
									"    method:'POST',\r",
									"    header: {'content-type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'formdata',\r",
									"        formdata: [\r",
									"            {key:\"name\", value: pm.environment.get(\"name\"), disabled: false},\r",
									"            {key:\"age\", value: pm.environment.get(\"age\"), disabled: false},\r",
									"            {key:\"salary\", value: pm.environment.get(\"u_salary_1_5_year\"), disabled: false},\r",
									"            {key:\"auth_token\", value: pm.environment.get(\"token\"), disabled: false}\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    //console.log(err);\r",
									"    console.log(res);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"age\": \"{{age}}\",\r\n    \"salary\": \"{{salary}}\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user_info",
							"host": [
								"{{url}}user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var res = pm.response.json();\r",
									"\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({ logger: console, allErrors: true }),\r",
									"schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\"type\": \"integer\"},\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"salary\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": [\r",
									"            {\"type\": \"integer\"},\r",
									"            {\"type\": \"string\"},\r",
									"            {\"type\": \"string\"}\r",
									"          ]\r",
									"    }\r",
									"  }\r",
									"}\r",
									"    \r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(ajv.validate(schema, res, JSON.stringify(ajv.errors))).to.be.true;\r",
									"})\r",
									"\r",
									"var req = request.data;\r",
									"\r",
									"pm.test(\"Salary * 2 is ok\", function() {\r",
									"    pm.expect(req.salary*2).to.eql(+res.salary[1])\r",
									"})\r",
									"\r",
									"pm.test(\"Salary * 3 is ok\", function() {\r",
									"    pm.expect(req.salary*3).to.eql(+res.salary[2])\r",
									"})\r",
									"\r",
									"pm.test(\"Check [2] > [1]\", function () {\r",
									"    pm.expect(+res.salary[2]).to.be.gt(+res.salary[1]);\r",
									"});\r",
									"\r",
									"pm.test(\"Check [2] > [0]\", function () {\r",
									"    pm.expect(+res.salary[2]).to.be.gt(res.salary[0]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}new_data",
							"host": [
								"{{url}}new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var res = pm.response.json();\r",
									"\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({ logger: console, allErrors: true }),\r",
									"schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\"type\": \"integer\"},\r",
									"    \"daily_food\": {\"type\": \"number\"},\r",
									"    \"daily_sleep\": {\"type\": \"number\"},\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    }\r",
									"  }\r",
									"    \r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(ajv.validate(schema, res, JSON.stringify(ajv.errors))).to.be.true;\r",
									"})\r",
									"\r",
									"var req = request.data;\r",
									"\r",
									"pm.test(\"Daily food: weight coeff\", function() {\r",
									"    pm.expect(req.weight*0.012).to.eql(res.daily_food)\r",
									"})\r",
									"\r",
									"pm.test(\"Daily sleep: weight coeff\", function() {\r",
									"    pm.expect(req.weight*2.5).to.eql(res.daily_sleep)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "75",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}test_pet_info",
							"host": [
								"{{url}}test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var res = pm.response.json();\r",
									"\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({ logger: console, allErrors: true }),\r",
									"schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\"type\": \"string\"},\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [{\"type\": \"string\"},\r",
									"                {\"type\": \"integer\"}]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [{\"type\": \"string\"},\r",
									"                {\"type\": \"integer\"}]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
									"      },\r",
									"      \"required\": [\"children\",\r",
									"        \"u_salary_1_5_year\"]\r",
									"    },\r",
									"    \"name\": {\"type\": \"string\"},\r",
									"    \"salary\": {\"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"age\",\"family\",\"name\",\"salary\"]\r",
									"}\r",
									"    \r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(ajv.validate(schema, res, JSON.stringify(ajv.errors))).to.be.true;})\r",
									"\r",
									"var req = request.data;\r",
									"var Ename = pm.environment.get(\"name\");\r",
									"\r",
									"pm.test(\"Name = environment name\", function() {\r",
									"    pm.expect(res.name).to.eql(Ename)\r",
									"})\r",
									"\r",
									"pm.test(\"Age = age from request\", function() {\r",
									"    pm.expect(res.age).to.eql(req.age)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{u_salary_1_5_year}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}get_test_user",
							"host": [
								"{{url}}get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res = pm.response.json();\r",
									"\r",
									"var max = res.length;\r",
									"\r",
									"function getRandomInt(max) {\r",
									"  return Math.floor(Math.random() * max);\r",
									"};\r",
									"\r",
									"var any = getRandomInt(max);\r",
									"console.log(any)\r",
									"var curID = res[any].Cur_ID;\r",
									"console.log(curID)\r",
									"\r",
									"pm.environment.set(\"cur_ID\", curID)\r",
									"\r",
									"const arr = [];\r",
									"\r",
									"for (var i of res) {\r",
									"    //console.log(i.Cur_ID)\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get('url') + 'curr_byn',\r",
									"    method:'POST',\r",
									"    header: {'content-type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'formdata',\r",
									"        formdata: [\r",
									"            {key:\"auth_token\", value: pm.environment.get(\"token\"), disabled: false},\r",
									"            {key:\"curr_code\", value: i.Cur_ID, disabled: false}]\r",
									"    }  \r",
									"}, \r",
									"function (err, response) {\r",
									"    //console.log(response.json());\r",
									"    if (response.json().status != 200){\r",
									"        arr.push(response.json().Cur_ID)};\r",
									"            console.log(response.json());\r",
									"            console.log('array =', arr);\r",
									"}\r",
									")\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}currency",
							"host": [
								"{{url}}currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var res = pm.response.json();\r",
									"\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({ logger: console, allErrors: true }),\r",
									"schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
									"    \"Cur_ID\": {\"type\": \"integer\"},\r",
									"    \"Cur_Name\": {\"type\": \"string\"},\r",
									"    \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
									"    \"Cur_Scale\": {\"type\": \"integer\"},\r",
									"    \"Date\": {\"type\": \"string\"}\r",
									"  },\r",
									"  \"required\": [\"Cur_Abbreviation\",\"Cur_ID\",\"Cur_Name\",\"Cur_OfficialRate\",\"Cur_Scale\",\"Date\"]\r",
									"}\r",
									"    \r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(ajv.validate(schema, res, JSON.stringify(ajv.errors))).to.be.true;})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{cur_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}curr_byn",
							"host": [
								"{{url}}curr_byn"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}